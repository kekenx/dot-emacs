# -*- mode: snippet -*-
# name: cbicoef
# key: cbicoef
# For bicoef library for competitive programming
# --
template<typename T, T mod>
class Modint {
private:
  T x;

public:
  Modint(): x((T)0) {}
  Modint(T y): x(y >= 0? y % mod: (mod - (-y) % mod) % mod) {}

  T get() {
    return x;
  }

  Modint &operator+=(const Modint &p) {
    if ((x += p.x) >= mod) x -= mod;
    return *this;
  }

  Modint &operator-=(const Modint &p) {
    if ((x += mod - p.x) >= mod) x -= mod;
    return *this;
  }

  Modint &operator*=(const Modint &p) {
    x = x * p.x % mod;
    return *this;
  }

  Modint &operator/=(const Modint &p) {
    *this *= p.inverse();
    return *this;
  }

  Modint operator-() const { return Modint(-x); }
  Modint operator+(const Modint &p) const {return Modint(*this) += p; }
  Modint operator-(const Modint &p) const {return Modint(*this) -= p; }
  Modint operator*(const Modint &p) const {return Modint(*this) *= p; }
  Modint operator/(const Modint &p) const {return Modint(*this) /= p; }

  bool operator==(const Modint &p) const { return x == p.x; }
  bool operator!=(const Modint &p) const { return x != p.x; }

  Modint inverse() const {
    T a = x, b = mod, u = 1, v = 0, t;
    while (b > 0) {
      t = a / b;
      a -= t * b;
      swap(a, b);
      u -= t * v;
      swap(u, v);
    }
    return Modint(u);
  }

  Modint pow(int e) const {
    T a = 1, p = x;
    while(e > 0) {
      if (e % 2 == 0) {
	p = (p * p) % mod;
	e /= 2;
      } else {
	a = (a * p) % mod;
	e--;
      }
    }
    return Modint(a);
  }
};

template<class T>
class BiCoef {
private:
  vector<T> fact, ifact;
public:
  BiCoef(int n) {init_table(n);}

  void init_table(int n) {
    fact.assign(n + 1, 1), ifact.assign(n + 1, 1);
    for (int i = 2; i < n + 1; ++i) fact[i] = fact[i - 1] * i;
    ifact[n] = fact[n].inverse();
    for (int i = n; i > 2; --i) ifact[i - 1] = ifact[i] * i; 
  }
  T comb(int n, int r) {
    return fact[n] * (ifact[r] * ifact[n - r]);
  }
};

constexpr long long MOD = 1000000007;

using mi = Modint<long long, MOD>;